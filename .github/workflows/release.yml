name: release

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Bump version"
        required: false
        type: choice
        options:
          - "none"
          - "major"
          - "minor"
          - "patch"
        default: "none"
      version:
        description: "Specific version"
        required: false
        type: string

jobs:
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      mode: ${{ steps.version.outputs.mode }}
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@main

      - name: Validate inputs and determine version
        id: version
        shell: pwsh
        run: |
          $bumpType = "${{ github.event.inputs.bump }}"
          $inputVersion = "${{ github.event.inputs.version }}"

          Write-Host "Bump type: '$bumpType'" -ForegroundColor Cyan
          Write-Host "Input version: '$inputVersion'" -ForegroundColor Cyan

          # Priority: version input overrides bump selection
          if (-not [string]::IsNullOrEmpty($inputVersion)) {
            # Mode 2: Manual version input (version takes precedence)
            if ($inputVersion -notmatch '^\d+\.\d+\.\d+$') {
              Write-Error "Version must be in format x.y.z (e.g., 1.3.1)" -ErrorAction Stop
            }

            Write-Host "Using manual version mode: $inputVersion (ignoring bump selection)" -ForegroundColor Green
            echo "version=$inputVersion" >> $env:GITHUB_OUTPUT
            echo "mode=manual" >> $env:GITHUB_OUTPUT

          } elseif ($bumpType -ne "none" -and $bumpType -ne "") {
            # Mode 1: Automatic version bumping
            Write-Host "Using version bump mode: $bumpType" -ForegroundColor Green

            # Read current version from manifest
            $manifestPath = './DailyBackup.psd1'
            $manifest = Test-ModuleManifest -Path $manifestPath
            $currentVersion = $manifest.Version
            Write-Host "Current version: $currentVersion" -ForegroundColor Yellow

            # Calculate new version based on bump type
            $major = $currentVersion.Major
            $minor = $currentVersion.Minor
            $build = $currentVersion.Build

            switch ($bumpType) {
              "major" {
                $major++
                $minor = 0
                $build = 0
              }
              "minor" {
                $minor++
                $build = 0
              }
              "patch" {
                $build++
              }
            }

            $newVersion = "$major.$minor.$build"
            Write-Host "New version (bumped): $newVersion" -ForegroundColor Green

            # Set outputs for next job
            echo "version=$newVersion" >> $env:GITHUB_OUTPUT
            echo "mode=bump" >> $env:GITHUB_OUTPUT

          } else {
            # No valid input provided
            Write-Error "Either specify a bump type (major/minor/patch) or provide a manual version" -ErrorAction Stop
          }

  release:
    name: Release v${{ needs.calculate-version.outputs.version }}
    runs-on: ubuntu-latest
    needs: calculate-version
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update module version
        shell: pwsh
        run: |
          $version = "${{ needs.calculate-version.outputs.version }}"
          $versionMode = "${{ needs.calculate-version.outputs.mode }}"
          $manifestPath = './DailyBackup.psd1'

          Write-Host "Updating module version to $version (mode: $versionMode)..." -ForegroundColor Green

          # Read the manifest content
          $content = Get-Content -Path $manifestPath -Raw

          # Update the ModuleVersion line
          $content = $content -replace "ModuleVersion = '[^']*'", "ModuleVersion = '$version'"

          # Write back to file
          Set-Content -Path $manifestPath -Value $content -NoNewline

          # Verify the change
          $manifest = Test-ModuleManifest -Path $manifestPath
          Write-Host "Updated module version to: $($manifest.Version)" -ForegroundColor Green

      - name: Build and validate module
        shell: pwsh
        run: ./Build.ps1 -Task All -Configuration Release

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add DailyBackup.psd1
          if git diff --cached --quiet; then
            echo "No changes to commit - version is already ${{ needs.calculate-version.outputs.version }}"
          else
            if [ "${{ needs.calculate-version.outputs.mode }}" = "bump" ]; then
              git commit -m "chore: bump version to v${{ needs.calculate-version.outputs.version }}"
            else
              git commit -m "chore: release v${{ needs.calculate-version.outputs.version }}"
            fi
            git push
          fi

      - name: Create Git tag
        run: |
          git tag -f "v${{ needs.calculate-version.outputs.version }}"
          git push -f origin "v${{ needs.calculate-version.outputs.version }}"

      - name: Publish to PSGallery
        shell: pwsh
        run: |
          Write-Host "Publishing module to PowerShell Gallery..." -ForegroundColor Green
          Publish-Module -Path ./dist/DailyBackup -NuGetApiKey ${{ secrets.NUGET_API_KEY }} -Verbose
